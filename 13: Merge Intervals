/**
 * @param {number[][]} intervals
 * @return {number[][]}
 */
var merge = function(intervals) {
      // let res = []
      // if (intervals.length === 1) return intervals
      //       for (let i = 0; i < intervals.length - 1; i++) {
      //           let box = []
      //           if (intervals[i][1] >= intervals[i + 1][0]) {
      //               box.push(intervals[i][0])
      //               box.push(intervals[i + 1][1])
      //               intervals[i + 1] = box
      //               //res.push(box)
      //               //console.log(box)
      //               if (i === intervals.length - 2) {
      //                   res.push(box)
      //               }
      //           } else {
      //               res.push(intervals[i])
      //               if (i === intervals.length - 2) {
      //                   res.push(intervals[i + 1])
      //               }
      //           }
      //       }
      //       return res
      
      //or
    
    let result = [];
    
    intervals.forEach(i => {
        let overlap = -1;
        
        for (let j = 0; j < result.length; j++) {    
            if (i[1] < result[j][0] || result[j][1] < i[0]) {
                continue;
            } else {
                if (-1 === overlap) {
                    overlap = j;
                    mergeArr(result[j], i);
                } else {
                    mergeArr(result[overlap], result[j]);
                    result.splice(j--, 1);
                }
            }
        }

        if (-1 === overlap) result.push(i);
    });
    
    return result;
};
var mergeArr = (r, i) => {
    r[0] = i[0] < r[0] ? i[0] : r[0];
    r[1] = i[1] < r[1] ? r[1] : i[1];
}

Runtime: 80 ms, faster than 98.78% of JavaScript online submissions for Merge Intervals.
Memory Usage: 40.5 MB, less than 98.22% of JavaScript online submissions for Merge Intervals.
